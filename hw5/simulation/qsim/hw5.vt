// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/12/2014 22:25:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    trifid
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module trifid_vlg_sample_tst(
	clk,
	crypt,
	data0,
	data1,
	data2,
	data3,
	data4,
	data5,
	data6,
	data7,
	data8,
	data9,
	data10,
	data11,
	data12,
	data13,
	data14,
	data15,
	data16,
	data17,
	ready,
	sampler_tx
);
input  clk;
input  crypt;
input [7:0] data0;
input [7:0] data1;
input [7:0] data2;
input [7:0] data3;
input [7:0] data4;
input [7:0] data5;
input [7:0] data6;
input [7:0] data7;
input [7:0] data8;
input [7:0] data9;
input [7:0] data10;
input [7:0] data11;
input [7:0] data12;
input [7:0] data13;
input [7:0] data14;
input [7:0] data15;
input [7:0] data16;
input [7:0] data17;
input  ready;
output sampler_tx;

reg sample;
time current_time;
always @(clk or crypt or data0 or data1 or data2 or data3 or data4 or data5 or data6 or data7 or data8 or data9 or data10 or data11 or data12 or data13 or data14 or data15 or data16 or data17 or ready)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module trifid_vlg_check_tst (
	cipher0,
	cipher1,
	cipher2,
	cipher3,
	cipher4,
	cipher5,
	cipher6,
	cipher7,
	cipher8,
	cipher9,
	cipher10,
	cipher11,
	cipher12,
	cipher13,
	cipher14,
	cipher15,
	cipher16,
	cipher17,
	done,
	sampler_rx
);
input [7:0] cipher0;
input [7:0] cipher1;
input [7:0] cipher2;
input [7:0] cipher3;
input [7:0] cipher4;
input [7:0] cipher5;
input [7:0] cipher6;
input [7:0] cipher7;
input [7:0] cipher8;
input [7:0] cipher9;
input [7:0] cipher10;
input [7:0] cipher11;
input [7:0] cipher12;
input [7:0] cipher13;
input [7:0] cipher14;
input [7:0] cipher15;
input [7:0] cipher16;
input [7:0] cipher17;
input  done;
input sampler_rx;

reg [7:0] cipher0_expected;
reg [7:0] cipher1_expected;
reg [7:0] cipher2_expected;
reg [7:0] cipher3_expected;
reg [7:0] cipher4_expected;
reg [7:0] cipher5_expected;
reg [7:0] cipher6_expected;
reg [7:0] cipher7_expected;
reg [7:0] cipher8_expected;
reg [7:0] cipher9_expected;
reg [7:0] cipher10_expected;
reg [7:0] cipher11_expected;
reg [7:0] cipher12_expected;
reg [7:0] cipher13_expected;
reg [7:0] cipher14_expected;
reg [7:0] cipher15_expected;
reg [7:0] cipher16_expected;
reg [7:0] cipher17_expected;
reg  done_expected;

reg [7:0] cipher0_prev;
reg [7:0] cipher1_prev;
reg [7:0] cipher2_prev;
reg [7:0] cipher3_prev;
reg [7:0] cipher4_prev;
reg [7:0] cipher5_prev;
reg [7:0] cipher6_prev;
reg [7:0] cipher7_prev;
reg [7:0] cipher8_prev;
reg [7:0] cipher9_prev;
reg [7:0] cipher10_prev;
reg [7:0] cipher11_prev;
reg [7:0] cipher12_prev;
reg [7:0] cipher13_prev;
reg [7:0] cipher14_prev;
reg [7:0] cipher15_prev;
reg [7:0] cipher16_prev;
reg [7:0] cipher17_prev;
reg  done_prev;

reg [7:0] cipher0_expected_prev;
reg [7:0] cipher1_expected_prev;
reg [7:0] cipher2_expected_prev;
reg [7:0] cipher3_expected_prev;
reg [7:0] cipher4_expected_prev;
reg [7:0] cipher5_expected_prev;
reg [7:0] cipher6_expected_prev;
reg [7:0] cipher7_expected_prev;
reg [7:0] cipher8_expected_prev;
reg [7:0] cipher9_expected_prev;
reg [7:0] cipher10_expected_prev;
reg [7:0] cipher11_expected_prev;
reg [7:0] cipher12_expected_prev;
reg [7:0] cipher13_expected_prev;
reg [7:0] cipher14_expected_prev;
reg [7:0] cipher15_expected_prev;
reg [7:0] cipher16_expected_prev;
reg [7:0] cipher17_expected_prev;
reg  done_expected_prev;

reg [7:0] last_cipher0_exp;
reg [7:0] last_cipher1_exp;
reg [7:0] last_cipher2_exp;
reg [7:0] last_cipher3_exp;
reg [7:0] last_cipher4_exp;
reg [7:0] last_cipher5_exp;
reg [7:0] last_cipher6_exp;
reg [7:0] last_cipher7_exp;
reg [7:0] last_cipher8_exp;
reg [7:0] last_cipher9_exp;
reg [7:0] last_cipher10_exp;
reg [7:0] last_cipher11_exp;
reg [7:0] last_cipher12_exp;
reg [7:0] last_cipher13_exp;
reg [7:0] last_cipher14_exp;
reg [7:0] last_cipher15_exp;
reg [7:0] last_cipher16_exp;
reg [7:0] last_cipher17_exp;
reg  last_done_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:19] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 19'b1;
end

// update real /o prevs

always @(trigger)
begin
	cipher0_prev = cipher0;
	cipher1_prev = cipher1;
	cipher2_prev = cipher2;
	cipher3_prev = cipher3;
	cipher4_prev = cipher4;
	cipher5_prev = cipher5;
	cipher6_prev = cipher6;
	cipher7_prev = cipher7;
	cipher8_prev = cipher8;
	cipher9_prev = cipher9;
	cipher10_prev = cipher10;
	cipher11_prev = cipher11;
	cipher12_prev = cipher12;
	cipher13_prev = cipher13;
	cipher14_prev = cipher14;
	cipher15_prev = cipher15;
	cipher16_prev = cipher16;
	cipher17_prev = cipher17;
	done_prev = done;
end

// update expected /o prevs

always @(trigger)
begin
	cipher0_expected_prev = cipher0_expected;
	cipher1_expected_prev = cipher1_expected;
	cipher2_expected_prev = cipher2_expected;
	cipher3_expected_prev = cipher3_expected;
	cipher4_expected_prev = cipher4_expected;
	cipher5_expected_prev = cipher5_expected;
	cipher6_expected_prev = cipher6_expected;
	cipher7_expected_prev = cipher7_expected;
	cipher8_expected_prev = cipher8_expected;
	cipher9_expected_prev = cipher9_expected;
	cipher10_expected_prev = cipher10_expected;
	cipher11_expected_prev = cipher11_expected;
	cipher12_expected_prev = cipher12_expected;
	cipher13_expected_prev = cipher13_expected;
	cipher14_expected_prev = cipher14_expected;
	cipher15_expected_prev = cipher15_expected;
	cipher16_expected_prev = cipher16_expected;
	cipher17_expected_prev = cipher17_expected;
	done_expected_prev = done_expected;
end


// expected cipher0[ 7 ]
initial
begin
	cipher0_expected[7] = 1'bX;
end 
// expected cipher0[ 6 ]
initial
begin
	cipher0_expected[6] = 1'bX;
end 
// expected cipher0[ 5 ]
initial
begin
	cipher0_expected[5] = 1'bX;
end 
// expected cipher0[ 4 ]
initial
begin
	cipher0_expected[4] = 1'bX;
end 
// expected cipher0[ 3 ]
initial
begin
	cipher0_expected[3] = 1'bX;
end 
// expected cipher0[ 2 ]
initial
begin
	cipher0_expected[2] = 1'bX;
end 
// expected cipher0[ 1 ]
initial
begin
	cipher0_expected[1] = 1'bX;
end 
// expected cipher0[ 0 ]
initial
begin
	cipher0_expected[0] = 1'bX;
end 
// expected cipher1[ 7 ]
initial
begin
	cipher1_expected[7] = 1'bX;
end 
// expected cipher1[ 6 ]
initial
begin
	cipher1_expected[6] = 1'bX;
end 
// expected cipher1[ 5 ]
initial
begin
	cipher1_expected[5] = 1'bX;
end 
// expected cipher1[ 4 ]
initial
begin
	cipher1_expected[4] = 1'bX;
end 
// expected cipher1[ 3 ]
initial
begin
	cipher1_expected[3] = 1'bX;
end 
// expected cipher1[ 2 ]
initial
begin
	cipher1_expected[2] = 1'bX;
end 
// expected cipher1[ 1 ]
initial
begin
	cipher1_expected[1] = 1'bX;
end 
// expected cipher1[ 0 ]
initial
begin
	cipher1_expected[0] = 1'bX;
end 
// expected cipher2[ 7 ]
initial
begin
	cipher2_expected[7] = 1'bX;
end 
// expected cipher2[ 6 ]
initial
begin
	cipher2_expected[6] = 1'bX;
end 
// expected cipher2[ 5 ]
initial
begin
	cipher2_expected[5] = 1'bX;
end 
// expected cipher2[ 4 ]
initial
begin
	cipher2_expected[4] = 1'bX;
end 
// expected cipher2[ 3 ]
initial
begin
	cipher2_expected[3] = 1'bX;
end 
// expected cipher2[ 2 ]
initial
begin
	cipher2_expected[2] = 1'bX;
end 
// expected cipher2[ 1 ]
initial
begin
	cipher2_expected[1] = 1'bX;
end 
// expected cipher2[ 0 ]
initial
begin
	cipher2_expected[0] = 1'bX;
end 
// expected cipher3[ 7 ]
initial
begin
	cipher3_expected[7] = 1'bX;
end 
// expected cipher3[ 6 ]
initial
begin
	cipher3_expected[6] = 1'bX;
end 
// expected cipher3[ 5 ]
initial
begin
	cipher3_expected[5] = 1'bX;
end 
// expected cipher3[ 4 ]
initial
begin
	cipher3_expected[4] = 1'bX;
end 
// expected cipher3[ 3 ]
initial
begin
	cipher3_expected[3] = 1'bX;
end 
// expected cipher3[ 2 ]
initial
begin
	cipher3_expected[2] = 1'bX;
end 
// expected cipher3[ 1 ]
initial
begin
	cipher3_expected[1] = 1'bX;
end 
// expected cipher3[ 0 ]
initial
begin
	cipher3_expected[0] = 1'bX;
end 
// expected cipher4[ 7 ]
initial
begin
	cipher4_expected[7] = 1'bX;
end 
// expected cipher4[ 6 ]
initial
begin
	cipher4_expected[6] = 1'bX;
end 
// expected cipher4[ 5 ]
initial
begin
	cipher4_expected[5] = 1'bX;
end 
// expected cipher4[ 4 ]
initial
begin
	cipher4_expected[4] = 1'bX;
end 
// expected cipher4[ 3 ]
initial
begin
	cipher4_expected[3] = 1'bX;
end 
// expected cipher4[ 2 ]
initial
begin
	cipher4_expected[2] = 1'bX;
end 
// expected cipher4[ 1 ]
initial
begin
	cipher4_expected[1] = 1'bX;
end 
// expected cipher4[ 0 ]
initial
begin
	cipher4_expected[0] = 1'bX;
end 
// expected cipher5[ 7 ]
initial
begin
	cipher5_expected[7] = 1'bX;
end 
// expected cipher5[ 6 ]
initial
begin
	cipher5_expected[6] = 1'bX;
end 
// expected cipher5[ 5 ]
initial
begin
	cipher5_expected[5] = 1'bX;
end 
// expected cipher5[ 4 ]
initial
begin
	cipher5_expected[4] = 1'bX;
end 
// expected cipher5[ 3 ]
initial
begin
	cipher5_expected[3] = 1'bX;
end 
// expected cipher5[ 2 ]
initial
begin
	cipher5_expected[2] = 1'bX;
end 
// expected cipher5[ 1 ]
initial
begin
	cipher5_expected[1] = 1'bX;
end 
// expected cipher5[ 0 ]
initial
begin
	cipher5_expected[0] = 1'bX;
end 
// expected cipher6[ 7 ]
initial
begin
	cipher6_expected[7] = 1'bX;
end 
// expected cipher6[ 6 ]
initial
begin
	cipher6_expected[6] = 1'bX;
end 
// expected cipher6[ 5 ]
initial
begin
	cipher6_expected[5] = 1'bX;
end 
// expected cipher6[ 4 ]
initial
begin
	cipher6_expected[4] = 1'bX;
end 
// expected cipher6[ 3 ]
initial
begin
	cipher6_expected[3] = 1'bX;
end 
// expected cipher6[ 2 ]
initial
begin
	cipher6_expected[2] = 1'bX;
end 
// expected cipher6[ 1 ]
initial
begin
	cipher6_expected[1] = 1'bX;
end 
// expected cipher6[ 0 ]
initial
begin
	cipher6_expected[0] = 1'bX;
end 
// expected cipher7[ 7 ]
initial
begin
	cipher7_expected[7] = 1'bX;
end 
// expected cipher7[ 6 ]
initial
begin
	cipher7_expected[6] = 1'bX;
end 
// expected cipher7[ 5 ]
initial
begin
	cipher7_expected[5] = 1'bX;
end 
// expected cipher7[ 4 ]
initial
begin
	cipher7_expected[4] = 1'bX;
end 
// expected cipher7[ 3 ]
initial
begin
	cipher7_expected[3] = 1'bX;
end 
// expected cipher7[ 2 ]
initial
begin
	cipher7_expected[2] = 1'bX;
end 
// expected cipher7[ 1 ]
initial
begin
	cipher7_expected[1] = 1'bX;
end 
// expected cipher7[ 0 ]
initial
begin
	cipher7_expected[0] = 1'bX;
end 
// expected cipher8[ 7 ]
initial
begin
	cipher8_expected[7] = 1'bX;
end 
// expected cipher8[ 6 ]
initial
begin
	cipher8_expected[6] = 1'bX;
end 
// expected cipher8[ 5 ]
initial
begin
	cipher8_expected[5] = 1'bX;
end 
// expected cipher8[ 4 ]
initial
begin
	cipher8_expected[4] = 1'bX;
end 
// expected cipher8[ 3 ]
initial
begin
	cipher8_expected[3] = 1'bX;
end 
// expected cipher8[ 2 ]
initial
begin
	cipher8_expected[2] = 1'bX;
end 
// expected cipher8[ 1 ]
initial
begin
	cipher8_expected[1] = 1'bX;
end 
// expected cipher8[ 0 ]
initial
begin
	cipher8_expected[0] = 1'bX;
end 
// expected cipher9[ 7 ]
initial
begin
	cipher9_expected[7] = 1'bX;
end 
// expected cipher9[ 6 ]
initial
begin
	cipher9_expected[6] = 1'bX;
end 
// expected cipher9[ 5 ]
initial
begin
	cipher9_expected[5] = 1'bX;
end 
// expected cipher9[ 4 ]
initial
begin
	cipher9_expected[4] = 1'bX;
end 
// expected cipher9[ 3 ]
initial
begin
	cipher9_expected[3] = 1'bX;
end 
// expected cipher9[ 2 ]
initial
begin
	cipher9_expected[2] = 1'bX;
end 
// expected cipher9[ 1 ]
initial
begin
	cipher9_expected[1] = 1'bX;
end 
// expected cipher9[ 0 ]
initial
begin
	cipher9_expected[0] = 1'bX;
end 
// expected cipher10[ 7 ]
initial
begin
	cipher10_expected[7] = 1'bX;
end 
// expected cipher10[ 6 ]
initial
begin
	cipher10_expected[6] = 1'bX;
end 
// expected cipher10[ 5 ]
initial
begin
	cipher10_expected[5] = 1'bX;
end 
// expected cipher10[ 4 ]
initial
begin
	cipher10_expected[4] = 1'bX;
end 
// expected cipher10[ 3 ]
initial
begin
	cipher10_expected[3] = 1'bX;
end 
// expected cipher10[ 2 ]
initial
begin
	cipher10_expected[2] = 1'bX;
end 
// expected cipher10[ 1 ]
initial
begin
	cipher10_expected[1] = 1'bX;
end 
// expected cipher10[ 0 ]
initial
begin
	cipher10_expected[0] = 1'bX;
end 
// expected cipher11[ 7 ]
initial
begin
	cipher11_expected[7] = 1'bX;
end 
// expected cipher11[ 6 ]
initial
begin
	cipher11_expected[6] = 1'bX;
end 
// expected cipher11[ 5 ]
initial
begin
	cipher11_expected[5] = 1'bX;
end 
// expected cipher11[ 4 ]
initial
begin
	cipher11_expected[4] = 1'bX;
end 
// expected cipher11[ 3 ]
initial
begin
	cipher11_expected[3] = 1'bX;
end 
// expected cipher11[ 2 ]
initial
begin
	cipher11_expected[2] = 1'bX;
end 
// expected cipher11[ 1 ]
initial
begin
	cipher11_expected[1] = 1'bX;
end 
// expected cipher11[ 0 ]
initial
begin
	cipher11_expected[0] = 1'bX;
end 
// expected cipher12[ 7 ]
initial
begin
	cipher12_expected[7] = 1'bX;
end 
// expected cipher12[ 6 ]
initial
begin
	cipher12_expected[6] = 1'bX;
end 
// expected cipher12[ 5 ]
initial
begin
	cipher12_expected[5] = 1'bX;
end 
// expected cipher12[ 4 ]
initial
begin
	cipher12_expected[4] = 1'bX;
end 
// expected cipher12[ 3 ]
initial
begin
	cipher12_expected[3] = 1'bX;
end 
// expected cipher12[ 2 ]
initial
begin
	cipher12_expected[2] = 1'bX;
end 
// expected cipher12[ 1 ]
initial
begin
	cipher12_expected[1] = 1'bX;
end 
// expected cipher12[ 0 ]
initial
begin
	cipher12_expected[0] = 1'bX;
end 
// expected cipher13[ 7 ]
initial
begin
	cipher13_expected[7] = 1'bX;
end 
// expected cipher13[ 6 ]
initial
begin
	cipher13_expected[6] = 1'bX;
end 
// expected cipher13[ 5 ]
initial
begin
	cipher13_expected[5] = 1'bX;
end 
// expected cipher13[ 4 ]
initial
begin
	cipher13_expected[4] = 1'bX;
end 
// expected cipher13[ 3 ]
initial
begin
	cipher13_expected[3] = 1'bX;
end 
// expected cipher13[ 2 ]
initial
begin
	cipher13_expected[2] = 1'bX;
end 
// expected cipher13[ 1 ]
initial
begin
	cipher13_expected[1] = 1'bX;
end 
// expected cipher13[ 0 ]
initial
begin
	cipher13_expected[0] = 1'bX;
end 
// expected cipher14[ 7 ]
initial
begin
	cipher14_expected[7] = 1'bX;
end 
// expected cipher14[ 6 ]
initial
begin
	cipher14_expected[6] = 1'bX;
end 
// expected cipher14[ 5 ]
initial
begin
	cipher14_expected[5] = 1'bX;
end 
// expected cipher14[ 4 ]
initial
begin
	cipher14_expected[4] = 1'bX;
end 
// expected cipher14[ 3 ]
initial
begin
	cipher14_expected[3] = 1'bX;
end 
// expected cipher14[ 2 ]
initial
begin
	cipher14_expected[2] = 1'bX;
end 
// expected cipher14[ 1 ]
initial
begin
	cipher14_expected[1] = 1'bX;
end 
// expected cipher14[ 0 ]
initial
begin
	cipher14_expected[0] = 1'bX;
end 
// expected cipher15[ 7 ]
initial
begin
	cipher15_expected[7] = 1'bX;
end 
// expected cipher15[ 6 ]
initial
begin
	cipher15_expected[6] = 1'bX;
end 
// expected cipher15[ 5 ]
initial
begin
	cipher15_expected[5] = 1'bX;
end 
// expected cipher15[ 4 ]
initial
begin
	cipher15_expected[4] = 1'bX;
end 
// expected cipher15[ 3 ]
initial
begin
	cipher15_expected[3] = 1'bX;
end 
// expected cipher15[ 2 ]
initial
begin
	cipher15_expected[2] = 1'bX;
end 
// expected cipher15[ 1 ]
initial
begin
	cipher15_expected[1] = 1'bX;
end 
// expected cipher15[ 0 ]
initial
begin
	cipher15_expected[0] = 1'bX;
end 
// expected cipher16[ 7 ]
initial
begin
	cipher16_expected[7] = 1'bX;
end 
// expected cipher16[ 6 ]
initial
begin
	cipher16_expected[6] = 1'bX;
end 
// expected cipher16[ 5 ]
initial
begin
	cipher16_expected[5] = 1'bX;
end 
// expected cipher16[ 4 ]
initial
begin
	cipher16_expected[4] = 1'bX;
end 
// expected cipher16[ 3 ]
initial
begin
	cipher16_expected[3] = 1'bX;
end 
// expected cipher16[ 2 ]
initial
begin
	cipher16_expected[2] = 1'bX;
end 
// expected cipher16[ 1 ]
initial
begin
	cipher16_expected[1] = 1'bX;
end 
// expected cipher16[ 0 ]
initial
begin
	cipher16_expected[0] = 1'bX;
end 
// expected cipher17[ 7 ]
initial
begin
	cipher17_expected[7] = 1'bX;
end 
// expected cipher17[ 6 ]
initial
begin
	cipher17_expected[6] = 1'bX;
end 
// expected cipher17[ 5 ]
initial
begin
	cipher17_expected[5] = 1'bX;
end 
// expected cipher17[ 4 ]
initial
begin
	cipher17_expected[4] = 1'bX;
end 
// expected cipher17[ 3 ]
initial
begin
	cipher17_expected[3] = 1'bX;
end 
// expected cipher17[ 2 ]
initial
begin
	cipher17_expected[2] = 1'bX;
end 
// expected cipher17[ 1 ]
initial
begin
	cipher17_expected[1] = 1'bX;
end 
// expected cipher17[ 0 ]
initial
begin
	cipher17_expected[0] = 1'bX;
end 

// expected done
initial
begin
	done_expected = 1'b0;
end 
// generate trigger
always @(cipher0_expected or cipher0 or cipher1_expected or cipher1 or cipher2_expected or cipher2 or cipher3_expected or cipher3 or cipher4_expected or cipher4 or cipher5_expected or cipher5 or cipher6_expected or cipher6 or cipher7_expected or cipher7 or cipher8_expected or cipher8 or cipher9_expected or cipher9 or cipher10_expected or cipher10 or cipher11_expected or cipher11 or cipher12_expected or cipher12 or cipher13_expected or cipher13 or cipher14_expected or cipher14 or cipher15_expected or cipher15 or cipher16_expected or cipher16 or cipher17_expected or cipher17 or done_expected or done)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cipher0 = %b | expected cipher1 = %b | expected cipher2 = %b | expected cipher3 = %b | expected cipher4 = %b | expected cipher5 = %b | expected cipher6 = %b | expected cipher7 = %b | expected cipher8 = %b | expected cipher9 = %b | expected cipher10 = %b | expected cipher11 = %b | expected cipher12 = %b | expected cipher13 = %b | expected cipher14 = %b | expected cipher15 = %b | expected cipher16 = %b | expected cipher17 = %b | expected done = %b | ",cipher0_expected_prev,cipher1_expected_prev,cipher2_expected_prev,cipher3_expected_prev,cipher4_expected_prev,cipher5_expected_prev,cipher6_expected_prev,cipher7_expected_prev,cipher8_expected_prev,cipher9_expected_prev,cipher10_expected_prev,cipher11_expected_prev,cipher12_expected_prev,cipher13_expected_prev,cipher14_expected_prev,cipher15_expected_prev,cipher16_expected_prev,cipher17_expected_prev,done_expected_prev);
	$display("| real cipher0 = %b | real cipher1 = %b | real cipher2 = %b | real cipher3 = %b | real cipher4 = %b | real cipher5 = %b | real cipher6 = %b | real cipher7 = %b | real cipher8 = %b | real cipher9 = %b | real cipher10 = %b | real cipher11 = %b | real cipher12 = %b | real cipher13 = %b | real cipher14 = %b | real cipher15 = %b | real cipher16 = %b | real cipher17 = %b | real done = %b | ",cipher0_prev,cipher1_prev,cipher2_prev,cipher3_prev,cipher4_prev,cipher5_prev,cipher6_prev,cipher7_prev,cipher8_prev,cipher9_prev,cipher10_prev,cipher11_prev,cipher12_prev,cipher13_prev,cipher14_prev,cipher15_prev,cipher16_prev,cipher17_prev,done_prev);
`endif
	if (
		( cipher0_expected_prev[0] !== 1'bx ) && ( cipher0_prev[0] !== cipher0_expected_prev[0] )
		&& ((cipher0_expected_prev[0] !== last_cipher0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher0_expected_prev);
		$display ("     Real value = %b", cipher0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cipher0_exp[0] = cipher0_expected_prev[0];
	end
	if (
		( cipher0_expected_prev[1] !== 1'bx ) && ( cipher0_prev[1] !== cipher0_expected_prev[1] )
		&& ((cipher0_expected_prev[1] !== last_cipher0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher0_expected_prev);
		$display ("     Real value = %b", cipher0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cipher0_exp[1] = cipher0_expected_prev[1];
	end
	if (
		( cipher0_expected_prev[2] !== 1'bx ) && ( cipher0_prev[2] !== cipher0_expected_prev[2] )
		&& ((cipher0_expected_prev[2] !== last_cipher0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher0_expected_prev);
		$display ("     Real value = %b", cipher0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cipher0_exp[2] = cipher0_expected_prev[2];
	end
	if (
		( cipher0_expected_prev[3] !== 1'bx ) && ( cipher0_prev[3] !== cipher0_expected_prev[3] )
		&& ((cipher0_expected_prev[3] !== last_cipher0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher0_expected_prev);
		$display ("     Real value = %b", cipher0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cipher0_exp[3] = cipher0_expected_prev[3];
	end
	if (
		( cipher0_expected_prev[4] !== 1'bx ) && ( cipher0_prev[4] !== cipher0_expected_prev[4] )
		&& ((cipher0_expected_prev[4] !== last_cipher0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher0_expected_prev);
		$display ("     Real value = %b", cipher0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cipher0_exp[4] = cipher0_expected_prev[4];
	end
	if (
		( cipher0_expected_prev[5] !== 1'bx ) && ( cipher0_prev[5] !== cipher0_expected_prev[5] )
		&& ((cipher0_expected_prev[5] !== last_cipher0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher0_expected_prev);
		$display ("     Real value = %b", cipher0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cipher0_exp[5] = cipher0_expected_prev[5];
	end
	if (
		( cipher0_expected_prev[6] !== 1'bx ) && ( cipher0_prev[6] !== cipher0_expected_prev[6] )
		&& ((cipher0_expected_prev[6] !== last_cipher0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher0_expected_prev);
		$display ("     Real value = %b", cipher0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cipher0_exp[6] = cipher0_expected_prev[6];
	end
	if (
		( cipher0_expected_prev[7] !== 1'bx ) && ( cipher0_prev[7] !== cipher0_expected_prev[7] )
		&& ((cipher0_expected_prev[7] !== last_cipher0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher0_expected_prev);
		$display ("     Real value = %b", cipher0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cipher0_exp[7] = cipher0_expected_prev[7];
	end
	if (
		( cipher1_expected_prev[0] !== 1'bx ) && ( cipher1_prev[0] !== cipher1_expected_prev[0] )
		&& ((cipher1_expected_prev[0] !== last_cipher1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher1_expected_prev);
		$display ("     Real value = %b", cipher1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cipher1_exp[0] = cipher1_expected_prev[0];
	end
	if (
		( cipher1_expected_prev[1] !== 1'bx ) && ( cipher1_prev[1] !== cipher1_expected_prev[1] )
		&& ((cipher1_expected_prev[1] !== last_cipher1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher1_expected_prev);
		$display ("     Real value = %b", cipher1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cipher1_exp[1] = cipher1_expected_prev[1];
	end
	if (
		( cipher1_expected_prev[2] !== 1'bx ) && ( cipher1_prev[2] !== cipher1_expected_prev[2] )
		&& ((cipher1_expected_prev[2] !== last_cipher1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher1_expected_prev);
		$display ("     Real value = %b", cipher1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cipher1_exp[2] = cipher1_expected_prev[2];
	end
	if (
		( cipher1_expected_prev[3] !== 1'bx ) && ( cipher1_prev[3] !== cipher1_expected_prev[3] )
		&& ((cipher1_expected_prev[3] !== last_cipher1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher1_expected_prev);
		$display ("     Real value = %b", cipher1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cipher1_exp[3] = cipher1_expected_prev[3];
	end
	if (
		( cipher1_expected_prev[4] !== 1'bx ) && ( cipher1_prev[4] !== cipher1_expected_prev[4] )
		&& ((cipher1_expected_prev[4] !== last_cipher1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher1_expected_prev);
		$display ("     Real value = %b", cipher1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cipher1_exp[4] = cipher1_expected_prev[4];
	end
	if (
		( cipher1_expected_prev[5] !== 1'bx ) && ( cipher1_prev[5] !== cipher1_expected_prev[5] )
		&& ((cipher1_expected_prev[5] !== last_cipher1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher1_expected_prev);
		$display ("     Real value = %b", cipher1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cipher1_exp[5] = cipher1_expected_prev[5];
	end
	if (
		( cipher1_expected_prev[6] !== 1'bx ) && ( cipher1_prev[6] !== cipher1_expected_prev[6] )
		&& ((cipher1_expected_prev[6] !== last_cipher1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher1_expected_prev);
		$display ("     Real value = %b", cipher1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cipher1_exp[6] = cipher1_expected_prev[6];
	end
	if (
		( cipher1_expected_prev[7] !== 1'bx ) && ( cipher1_prev[7] !== cipher1_expected_prev[7] )
		&& ((cipher1_expected_prev[7] !== last_cipher1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher1_expected_prev);
		$display ("     Real value = %b", cipher1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cipher1_exp[7] = cipher1_expected_prev[7];
	end
	if (
		( cipher2_expected_prev[0] !== 1'bx ) && ( cipher2_prev[0] !== cipher2_expected_prev[0] )
		&& ((cipher2_expected_prev[0] !== last_cipher2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher2_expected_prev);
		$display ("     Real value = %b", cipher2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cipher2_exp[0] = cipher2_expected_prev[0];
	end
	if (
		( cipher2_expected_prev[1] !== 1'bx ) && ( cipher2_prev[1] !== cipher2_expected_prev[1] )
		&& ((cipher2_expected_prev[1] !== last_cipher2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher2_expected_prev);
		$display ("     Real value = %b", cipher2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cipher2_exp[1] = cipher2_expected_prev[1];
	end
	if (
		( cipher2_expected_prev[2] !== 1'bx ) && ( cipher2_prev[2] !== cipher2_expected_prev[2] )
		&& ((cipher2_expected_prev[2] !== last_cipher2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher2_expected_prev);
		$display ("     Real value = %b", cipher2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cipher2_exp[2] = cipher2_expected_prev[2];
	end
	if (
		( cipher2_expected_prev[3] !== 1'bx ) && ( cipher2_prev[3] !== cipher2_expected_prev[3] )
		&& ((cipher2_expected_prev[3] !== last_cipher2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher2_expected_prev);
		$display ("     Real value = %b", cipher2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cipher2_exp[3] = cipher2_expected_prev[3];
	end
	if (
		( cipher2_expected_prev[4] !== 1'bx ) && ( cipher2_prev[4] !== cipher2_expected_prev[4] )
		&& ((cipher2_expected_prev[4] !== last_cipher2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher2_expected_prev);
		$display ("     Real value = %b", cipher2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cipher2_exp[4] = cipher2_expected_prev[4];
	end
	if (
		( cipher2_expected_prev[5] !== 1'bx ) && ( cipher2_prev[5] !== cipher2_expected_prev[5] )
		&& ((cipher2_expected_prev[5] !== last_cipher2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher2_expected_prev);
		$display ("     Real value = %b", cipher2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cipher2_exp[5] = cipher2_expected_prev[5];
	end
	if (
		( cipher2_expected_prev[6] !== 1'bx ) && ( cipher2_prev[6] !== cipher2_expected_prev[6] )
		&& ((cipher2_expected_prev[6] !== last_cipher2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher2_expected_prev);
		$display ("     Real value = %b", cipher2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cipher2_exp[6] = cipher2_expected_prev[6];
	end
	if (
		( cipher2_expected_prev[7] !== 1'bx ) && ( cipher2_prev[7] !== cipher2_expected_prev[7] )
		&& ((cipher2_expected_prev[7] !== last_cipher2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher2_expected_prev);
		$display ("     Real value = %b", cipher2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cipher2_exp[7] = cipher2_expected_prev[7];
	end
	if (
		( cipher3_expected_prev[0] !== 1'bx ) && ( cipher3_prev[0] !== cipher3_expected_prev[0] )
		&& ((cipher3_expected_prev[0] !== last_cipher3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher3_expected_prev);
		$display ("     Real value = %b", cipher3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_cipher3_exp[0] = cipher3_expected_prev[0];
	end
	if (
		( cipher3_expected_prev[1] !== 1'bx ) && ( cipher3_prev[1] !== cipher3_expected_prev[1] )
		&& ((cipher3_expected_prev[1] !== last_cipher3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher3_expected_prev);
		$display ("     Real value = %b", cipher3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_cipher3_exp[1] = cipher3_expected_prev[1];
	end
	if (
		( cipher3_expected_prev[2] !== 1'bx ) && ( cipher3_prev[2] !== cipher3_expected_prev[2] )
		&& ((cipher3_expected_prev[2] !== last_cipher3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher3_expected_prev);
		$display ("     Real value = %b", cipher3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_cipher3_exp[2] = cipher3_expected_prev[2];
	end
	if (
		( cipher3_expected_prev[3] !== 1'bx ) && ( cipher3_prev[3] !== cipher3_expected_prev[3] )
		&& ((cipher3_expected_prev[3] !== last_cipher3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher3_expected_prev);
		$display ("     Real value = %b", cipher3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_cipher3_exp[3] = cipher3_expected_prev[3];
	end
	if (
		( cipher3_expected_prev[4] !== 1'bx ) && ( cipher3_prev[4] !== cipher3_expected_prev[4] )
		&& ((cipher3_expected_prev[4] !== last_cipher3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher3_expected_prev);
		$display ("     Real value = %b", cipher3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_cipher3_exp[4] = cipher3_expected_prev[4];
	end
	if (
		( cipher3_expected_prev[5] !== 1'bx ) && ( cipher3_prev[5] !== cipher3_expected_prev[5] )
		&& ((cipher3_expected_prev[5] !== last_cipher3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher3_expected_prev);
		$display ("     Real value = %b", cipher3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_cipher3_exp[5] = cipher3_expected_prev[5];
	end
	if (
		( cipher3_expected_prev[6] !== 1'bx ) && ( cipher3_prev[6] !== cipher3_expected_prev[6] )
		&& ((cipher3_expected_prev[6] !== last_cipher3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher3_expected_prev);
		$display ("     Real value = %b", cipher3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_cipher3_exp[6] = cipher3_expected_prev[6];
	end
	if (
		( cipher3_expected_prev[7] !== 1'bx ) && ( cipher3_prev[7] !== cipher3_expected_prev[7] )
		&& ((cipher3_expected_prev[7] !== last_cipher3_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher3_expected_prev);
		$display ("     Real value = %b", cipher3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_cipher3_exp[7] = cipher3_expected_prev[7];
	end
	if (
		( cipher4_expected_prev[0] !== 1'bx ) && ( cipher4_prev[0] !== cipher4_expected_prev[0] )
		&& ((cipher4_expected_prev[0] !== last_cipher4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher4_expected_prev);
		$display ("     Real value = %b", cipher4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_cipher4_exp[0] = cipher4_expected_prev[0];
	end
	if (
		( cipher4_expected_prev[1] !== 1'bx ) && ( cipher4_prev[1] !== cipher4_expected_prev[1] )
		&& ((cipher4_expected_prev[1] !== last_cipher4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher4_expected_prev);
		$display ("     Real value = %b", cipher4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_cipher4_exp[1] = cipher4_expected_prev[1];
	end
	if (
		( cipher4_expected_prev[2] !== 1'bx ) && ( cipher4_prev[2] !== cipher4_expected_prev[2] )
		&& ((cipher4_expected_prev[2] !== last_cipher4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher4_expected_prev);
		$display ("     Real value = %b", cipher4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_cipher4_exp[2] = cipher4_expected_prev[2];
	end
	if (
		( cipher4_expected_prev[3] !== 1'bx ) && ( cipher4_prev[3] !== cipher4_expected_prev[3] )
		&& ((cipher4_expected_prev[3] !== last_cipher4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher4_expected_prev);
		$display ("     Real value = %b", cipher4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_cipher4_exp[3] = cipher4_expected_prev[3];
	end
	if (
		( cipher4_expected_prev[4] !== 1'bx ) && ( cipher4_prev[4] !== cipher4_expected_prev[4] )
		&& ((cipher4_expected_prev[4] !== last_cipher4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher4_expected_prev);
		$display ("     Real value = %b", cipher4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_cipher4_exp[4] = cipher4_expected_prev[4];
	end
	if (
		( cipher4_expected_prev[5] !== 1'bx ) && ( cipher4_prev[5] !== cipher4_expected_prev[5] )
		&& ((cipher4_expected_prev[5] !== last_cipher4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher4_expected_prev);
		$display ("     Real value = %b", cipher4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_cipher4_exp[5] = cipher4_expected_prev[5];
	end
	if (
		( cipher4_expected_prev[6] !== 1'bx ) && ( cipher4_prev[6] !== cipher4_expected_prev[6] )
		&& ((cipher4_expected_prev[6] !== last_cipher4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher4_expected_prev);
		$display ("     Real value = %b", cipher4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_cipher4_exp[6] = cipher4_expected_prev[6];
	end
	if (
		( cipher4_expected_prev[7] !== 1'bx ) && ( cipher4_prev[7] !== cipher4_expected_prev[7] )
		&& ((cipher4_expected_prev[7] !== last_cipher4_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher4_expected_prev);
		$display ("     Real value = %b", cipher4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_cipher4_exp[7] = cipher4_expected_prev[7];
	end
	if (
		( cipher5_expected_prev[0] !== 1'bx ) && ( cipher5_prev[0] !== cipher5_expected_prev[0] )
		&& ((cipher5_expected_prev[0] !== last_cipher5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher5_expected_prev);
		$display ("     Real value = %b", cipher5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_cipher5_exp[0] = cipher5_expected_prev[0];
	end
	if (
		( cipher5_expected_prev[1] !== 1'bx ) && ( cipher5_prev[1] !== cipher5_expected_prev[1] )
		&& ((cipher5_expected_prev[1] !== last_cipher5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher5_expected_prev);
		$display ("     Real value = %b", cipher5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_cipher5_exp[1] = cipher5_expected_prev[1];
	end
	if (
		( cipher5_expected_prev[2] !== 1'bx ) && ( cipher5_prev[2] !== cipher5_expected_prev[2] )
		&& ((cipher5_expected_prev[2] !== last_cipher5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher5_expected_prev);
		$display ("     Real value = %b", cipher5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_cipher5_exp[2] = cipher5_expected_prev[2];
	end
	if (
		( cipher5_expected_prev[3] !== 1'bx ) && ( cipher5_prev[3] !== cipher5_expected_prev[3] )
		&& ((cipher5_expected_prev[3] !== last_cipher5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher5_expected_prev);
		$display ("     Real value = %b", cipher5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_cipher5_exp[3] = cipher5_expected_prev[3];
	end
	if (
		( cipher5_expected_prev[4] !== 1'bx ) && ( cipher5_prev[4] !== cipher5_expected_prev[4] )
		&& ((cipher5_expected_prev[4] !== last_cipher5_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher5_expected_prev);
		$display ("     Real value = %b", cipher5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_cipher5_exp[4] = cipher5_expected_prev[4];
	end
	if (
		( cipher5_expected_prev[5] !== 1'bx ) && ( cipher5_prev[5] !== cipher5_expected_prev[5] )
		&& ((cipher5_expected_prev[5] !== last_cipher5_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher5_expected_prev);
		$display ("     Real value = %b", cipher5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_cipher5_exp[5] = cipher5_expected_prev[5];
	end
	if (
		( cipher5_expected_prev[6] !== 1'bx ) && ( cipher5_prev[6] !== cipher5_expected_prev[6] )
		&& ((cipher5_expected_prev[6] !== last_cipher5_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher5_expected_prev);
		$display ("     Real value = %b", cipher5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_cipher5_exp[6] = cipher5_expected_prev[6];
	end
	if (
		( cipher5_expected_prev[7] !== 1'bx ) && ( cipher5_prev[7] !== cipher5_expected_prev[7] )
		&& ((cipher5_expected_prev[7] !== last_cipher5_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher5_expected_prev);
		$display ("     Real value = %b", cipher5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_cipher5_exp[7] = cipher5_expected_prev[7];
	end
	if (
		( cipher6_expected_prev[0] !== 1'bx ) && ( cipher6_prev[0] !== cipher6_expected_prev[0] )
		&& ((cipher6_expected_prev[0] !== last_cipher6_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher6_expected_prev);
		$display ("     Real value = %b", cipher6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cipher6_exp[0] = cipher6_expected_prev[0];
	end
	if (
		( cipher6_expected_prev[1] !== 1'bx ) && ( cipher6_prev[1] !== cipher6_expected_prev[1] )
		&& ((cipher6_expected_prev[1] !== last_cipher6_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher6_expected_prev);
		$display ("     Real value = %b", cipher6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cipher6_exp[1] = cipher6_expected_prev[1];
	end
	if (
		( cipher6_expected_prev[2] !== 1'bx ) && ( cipher6_prev[2] !== cipher6_expected_prev[2] )
		&& ((cipher6_expected_prev[2] !== last_cipher6_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher6_expected_prev);
		$display ("     Real value = %b", cipher6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cipher6_exp[2] = cipher6_expected_prev[2];
	end
	if (
		( cipher6_expected_prev[3] !== 1'bx ) && ( cipher6_prev[3] !== cipher6_expected_prev[3] )
		&& ((cipher6_expected_prev[3] !== last_cipher6_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher6_expected_prev);
		$display ("     Real value = %b", cipher6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cipher6_exp[3] = cipher6_expected_prev[3];
	end
	if (
		( cipher6_expected_prev[4] !== 1'bx ) && ( cipher6_prev[4] !== cipher6_expected_prev[4] )
		&& ((cipher6_expected_prev[4] !== last_cipher6_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher6_expected_prev);
		$display ("     Real value = %b", cipher6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cipher6_exp[4] = cipher6_expected_prev[4];
	end
	if (
		( cipher6_expected_prev[5] !== 1'bx ) && ( cipher6_prev[5] !== cipher6_expected_prev[5] )
		&& ((cipher6_expected_prev[5] !== last_cipher6_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher6_expected_prev);
		$display ("     Real value = %b", cipher6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cipher6_exp[5] = cipher6_expected_prev[5];
	end
	if (
		( cipher6_expected_prev[6] !== 1'bx ) && ( cipher6_prev[6] !== cipher6_expected_prev[6] )
		&& ((cipher6_expected_prev[6] !== last_cipher6_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher6_expected_prev);
		$display ("     Real value = %b", cipher6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cipher6_exp[6] = cipher6_expected_prev[6];
	end
	if (
		( cipher6_expected_prev[7] !== 1'bx ) && ( cipher6_prev[7] !== cipher6_expected_prev[7] )
		&& ((cipher6_expected_prev[7] !== last_cipher6_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher6[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher6_expected_prev);
		$display ("     Real value = %b", cipher6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cipher6_exp[7] = cipher6_expected_prev[7];
	end
	if (
		( cipher7_expected_prev[0] !== 1'bx ) && ( cipher7_prev[0] !== cipher7_expected_prev[0] )
		&& ((cipher7_expected_prev[0] !== last_cipher7_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher7_expected_prev);
		$display ("     Real value = %b", cipher7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cipher7_exp[0] = cipher7_expected_prev[0];
	end
	if (
		( cipher7_expected_prev[1] !== 1'bx ) && ( cipher7_prev[1] !== cipher7_expected_prev[1] )
		&& ((cipher7_expected_prev[1] !== last_cipher7_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher7_expected_prev);
		$display ("     Real value = %b", cipher7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cipher7_exp[1] = cipher7_expected_prev[1];
	end
	if (
		( cipher7_expected_prev[2] !== 1'bx ) && ( cipher7_prev[2] !== cipher7_expected_prev[2] )
		&& ((cipher7_expected_prev[2] !== last_cipher7_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher7_expected_prev);
		$display ("     Real value = %b", cipher7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cipher7_exp[2] = cipher7_expected_prev[2];
	end
	if (
		( cipher7_expected_prev[3] !== 1'bx ) && ( cipher7_prev[3] !== cipher7_expected_prev[3] )
		&& ((cipher7_expected_prev[3] !== last_cipher7_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher7_expected_prev);
		$display ("     Real value = %b", cipher7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cipher7_exp[3] = cipher7_expected_prev[3];
	end
	if (
		( cipher7_expected_prev[4] !== 1'bx ) && ( cipher7_prev[4] !== cipher7_expected_prev[4] )
		&& ((cipher7_expected_prev[4] !== last_cipher7_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher7_expected_prev);
		$display ("     Real value = %b", cipher7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cipher7_exp[4] = cipher7_expected_prev[4];
	end
	if (
		( cipher7_expected_prev[5] !== 1'bx ) && ( cipher7_prev[5] !== cipher7_expected_prev[5] )
		&& ((cipher7_expected_prev[5] !== last_cipher7_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher7_expected_prev);
		$display ("     Real value = %b", cipher7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cipher7_exp[5] = cipher7_expected_prev[5];
	end
	if (
		( cipher7_expected_prev[6] !== 1'bx ) && ( cipher7_prev[6] !== cipher7_expected_prev[6] )
		&& ((cipher7_expected_prev[6] !== last_cipher7_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher7_expected_prev);
		$display ("     Real value = %b", cipher7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cipher7_exp[6] = cipher7_expected_prev[6];
	end
	if (
		( cipher7_expected_prev[7] !== 1'bx ) && ( cipher7_prev[7] !== cipher7_expected_prev[7] )
		&& ((cipher7_expected_prev[7] !== last_cipher7_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher7[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher7_expected_prev);
		$display ("     Real value = %b", cipher7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cipher7_exp[7] = cipher7_expected_prev[7];
	end
	if (
		( cipher8_expected_prev[0] !== 1'bx ) && ( cipher8_prev[0] !== cipher8_expected_prev[0] )
		&& ((cipher8_expected_prev[0] !== last_cipher8_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher8[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher8_expected_prev);
		$display ("     Real value = %b", cipher8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cipher8_exp[0] = cipher8_expected_prev[0];
	end
	if (
		( cipher8_expected_prev[1] !== 1'bx ) && ( cipher8_prev[1] !== cipher8_expected_prev[1] )
		&& ((cipher8_expected_prev[1] !== last_cipher8_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher8[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher8_expected_prev);
		$display ("     Real value = %b", cipher8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cipher8_exp[1] = cipher8_expected_prev[1];
	end
	if (
		( cipher8_expected_prev[2] !== 1'bx ) && ( cipher8_prev[2] !== cipher8_expected_prev[2] )
		&& ((cipher8_expected_prev[2] !== last_cipher8_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher8[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher8_expected_prev);
		$display ("     Real value = %b", cipher8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cipher8_exp[2] = cipher8_expected_prev[2];
	end
	if (
		( cipher8_expected_prev[3] !== 1'bx ) && ( cipher8_prev[3] !== cipher8_expected_prev[3] )
		&& ((cipher8_expected_prev[3] !== last_cipher8_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher8[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher8_expected_prev);
		$display ("     Real value = %b", cipher8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cipher8_exp[3] = cipher8_expected_prev[3];
	end
	if (
		( cipher8_expected_prev[4] !== 1'bx ) && ( cipher8_prev[4] !== cipher8_expected_prev[4] )
		&& ((cipher8_expected_prev[4] !== last_cipher8_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher8[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher8_expected_prev);
		$display ("     Real value = %b", cipher8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cipher8_exp[4] = cipher8_expected_prev[4];
	end
	if (
		( cipher8_expected_prev[5] !== 1'bx ) && ( cipher8_prev[5] !== cipher8_expected_prev[5] )
		&& ((cipher8_expected_prev[5] !== last_cipher8_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher8[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher8_expected_prev);
		$display ("     Real value = %b", cipher8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cipher8_exp[5] = cipher8_expected_prev[5];
	end
	if (
		( cipher8_expected_prev[6] !== 1'bx ) && ( cipher8_prev[6] !== cipher8_expected_prev[6] )
		&& ((cipher8_expected_prev[6] !== last_cipher8_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher8[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher8_expected_prev);
		$display ("     Real value = %b", cipher8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cipher8_exp[6] = cipher8_expected_prev[6];
	end
	if (
		( cipher8_expected_prev[7] !== 1'bx ) && ( cipher8_prev[7] !== cipher8_expected_prev[7] )
		&& ((cipher8_expected_prev[7] !== last_cipher8_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher8[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher8_expected_prev);
		$display ("     Real value = %b", cipher8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cipher8_exp[7] = cipher8_expected_prev[7];
	end
	if (
		( cipher9_expected_prev[0] !== 1'bx ) && ( cipher9_prev[0] !== cipher9_expected_prev[0] )
		&& ((cipher9_expected_prev[0] !== last_cipher9_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher9[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher9_expected_prev);
		$display ("     Real value = %b", cipher9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_cipher9_exp[0] = cipher9_expected_prev[0];
	end
	if (
		( cipher9_expected_prev[1] !== 1'bx ) && ( cipher9_prev[1] !== cipher9_expected_prev[1] )
		&& ((cipher9_expected_prev[1] !== last_cipher9_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher9[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher9_expected_prev);
		$display ("     Real value = %b", cipher9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_cipher9_exp[1] = cipher9_expected_prev[1];
	end
	if (
		( cipher9_expected_prev[2] !== 1'bx ) && ( cipher9_prev[2] !== cipher9_expected_prev[2] )
		&& ((cipher9_expected_prev[2] !== last_cipher9_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher9[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher9_expected_prev);
		$display ("     Real value = %b", cipher9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_cipher9_exp[2] = cipher9_expected_prev[2];
	end
	if (
		( cipher9_expected_prev[3] !== 1'bx ) && ( cipher9_prev[3] !== cipher9_expected_prev[3] )
		&& ((cipher9_expected_prev[3] !== last_cipher9_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher9[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher9_expected_prev);
		$display ("     Real value = %b", cipher9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_cipher9_exp[3] = cipher9_expected_prev[3];
	end
	if (
		( cipher9_expected_prev[4] !== 1'bx ) && ( cipher9_prev[4] !== cipher9_expected_prev[4] )
		&& ((cipher9_expected_prev[4] !== last_cipher9_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher9[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher9_expected_prev);
		$display ("     Real value = %b", cipher9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_cipher9_exp[4] = cipher9_expected_prev[4];
	end
	if (
		( cipher9_expected_prev[5] !== 1'bx ) && ( cipher9_prev[5] !== cipher9_expected_prev[5] )
		&& ((cipher9_expected_prev[5] !== last_cipher9_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher9[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher9_expected_prev);
		$display ("     Real value = %b", cipher9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_cipher9_exp[5] = cipher9_expected_prev[5];
	end
	if (
		( cipher9_expected_prev[6] !== 1'bx ) && ( cipher9_prev[6] !== cipher9_expected_prev[6] )
		&& ((cipher9_expected_prev[6] !== last_cipher9_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher9[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher9_expected_prev);
		$display ("     Real value = %b", cipher9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_cipher9_exp[6] = cipher9_expected_prev[6];
	end
	if (
		( cipher9_expected_prev[7] !== 1'bx ) && ( cipher9_prev[7] !== cipher9_expected_prev[7] )
		&& ((cipher9_expected_prev[7] !== last_cipher9_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher9[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher9_expected_prev);
		$display ("     Real value = %b", cipher9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_cipher9_exp[7] = cipher9_expected_prev[7];
	end
	if (
		( cipher10_expected_prev[0] !== 1'bx ) && ( cipher10_prev[0] !== cipher10_expected_prev[0] )
		&& ((cipher10_expected_prev[0] !== last_cipher10_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher10[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher10_expected_prev);
		$display ("     Real value = %b", cipher10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_cipher10_exp[0] = cipher10_expected_prev[0];
	end
	if (
		( cipher10_expected_prev[1] !== 1'bx ) && ( cipher10_prev[1] !== cipher10_expected_prev[1] )
		&& ((cipher10_expected_prev[1] !== last_cipher10_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher10[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher10_expected_prev);
		$display ("     Real value = %b", cipher10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_cipher10_exp[1] = cipher10_expected_prev[1];
	end
	if (
		( cipher10_expected_prev[2] !== 1'bx ) && ( cipher10_prev[2] !== cipher10_expected_prev[2] )
		&& ((cipher10_expected_prev[2] !== last_cipher10_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher10[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher10_expected_prev);
		$display ("     Real value = %b", cipher10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_cipher10_exp[2] = cipher10_expected_prev[2];
	end
	if (
		( cipher10_expected_prev[3] !== 1'bx ) && ( cipher10_prev[3] !== cipher10_expected_prev[3] )
		&& ((cipher10_expected_prev[3] !== last_cipher10_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher10[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher10_expected_prev);
		$display ("     Real value = %b", cipher10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_cipher10_exp[3] = cipher10_expected_prev[3];
	end
	if (
		( cipher10_expected_prev[4] !== 1'bx ) && ( cipher10_prev[4] !== cipher10_expected_prev[4] )
		&& ((cipher10_expected_prev[4] !== last_cipher10_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher10[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher10_expected_prev);
		$display ("     Real value = %b", cipher10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_cipher10_exp[4] = cipher10_expected_prev[4];
	end
	if (
		( cipher10_expected_prev[5] !== 1'bx ) && ( cipher10_prev[5] !== cipher10_expected_prev[5] )
		&& ((cipher10_expected_prev[5] !== last_cipher10_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher10[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher10_expected_prev);
		$display ("     Real value = %b", cipher10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_cipher10_exp[5] = cipher10_expected_prev[5];
	end
	if (
		( cipher10_expected_prev[6] !== 1'bx ) && ( cipher10_prev[6] !== cipher10_expected_prev[6] )
		&& ((cipher10_expected_prev[6] !== last_cipher10_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher10[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher10_expected_prev);
		$display ("     Real value = %b", cipher10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_cipher10_exp[6] = cipher10_expected_prev[6];
	end
	if (
		( cipher10_expected_prev[7] !== 1'bx ) && ( cipher10_prev[7] !== cipher10_expected_prev[7] )
		&& ((cipher10_expected_prev[7] !== last_cipher10_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher10[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher10_expected_prev);
		$display ("     Real value = %b", cipher10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_cipher10_exp[7] = cipher10_expected_prev[7];
	end
	if (
		( cipher11_expected_prev[0] !== 1'bx ) && ( cipher11_prev[0] !== cipher11_expected_prev[0] )
		&& ((cipher11_expected_prev[0] !== last_cipher11_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher11[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher11_expected_prev);
		$display ("     Real value = %b", cipher11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_cipher11_exp[0] = cipher11_expected_prev[0];
	end
	if (
		( cipher11_expected_prev[1] !== 1'bx ) && ( cipher11_prev[1] !== cipher11_expected_prev[1] )
		&& ((cipher11_expected_prev[1] !== last_cipher11_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher11[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher11_expected_prev);
		$display ("     Real value = %b", cipher11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_cipher11_exp[1] = cipher11_expected_prev[1];
	end
	if (
		( cipher11_expected_prev[2] !== 1'bx ) && ( cipher11_prev[2] !== cipher11_expected_prev[2] )
		&& ((cipher11_expected_prev[2] !== last_cipher11_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher11[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher11_expected_prev);
		$display ("     Real value = %b", cipher11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_cipher11_exp[2] = cipher11_expected_prev[2];
	end
	if (
		( cipher11_expected_prev[3] !== 1'bx ) && ( cipher11_prev[3] !== cipher11_expected_prev[3] )
		&& ((cipher11_expected_prev[3] !== last_cipher11_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher11[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher11_expected_prev);
		$display ("     Real value = %b", cipher11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_cipher11_exp[3] = cipher11_expected_prev[3];
	end
	if (
		( cipher11_expected_prev[4] !== 1'bx ) && ( cipher11_prev[4] !== cipher11_expected_prev[4] )
		&& ((cipher11_expected_prev[4] !== last_cipher11_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher11[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher11_expected_prev);
		$display ("     Real value = %b", cipher11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_cipher11_exp[4] = cipher11_expected_prev[4];
	end
	if (
		( cipher11_expected_prev[5] !== 1'bx ) && ( cipher11_prev[5] !== cipher11_expected_prev[5] )
		&& ((cipher11_expected_prev[5] !== last_cipher11_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher11[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher11_expected_prev);
		$display ("     Real value = %b", cipher11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_cipher11_exp[5] = cipher11_expected_prev[5];
	end
	if (
		( cipher11_expected_prev[6] !== 1'bx ) && ( cipher11_prev[6] !== cipher11_expected_prev[6] )
		&& ((cipher11_expected_prev[6] !== last_cipher11_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher11[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher11_expected_prev);
		$display ("     Real value = %b", cipher11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_cipher11_exp[6] = cipher11_expected_prev[6];
	end
	if (
		( cipher11_expected_prev[7] !== 1'bx ) && ( cipher11_prev[7] !== cipher11_expected_prev[7] )
		&& ((cipher11_expected_prev[7] !== last_cipher11_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher11[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher11_expected_prev);
		$display ("     Real value = %b", cipher11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_cipher11_exp[7] = cipher11_expected_prev[7];
	end
	if (
		( cipher12_expected_prev[0] !== 1'bx ) && ( cipher12_prev[0] !== cipher12_expected_prev[0] )
		&& ((cipher12_expected_prev[0] !== last_cipher12_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher12[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher12_expected_prev);
		$display ("     Real value = %b", cipher12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_cipher12_exp[0] = cipher12_expected_prev[0];
	end
	if (
		( cipher12_expected_prev[1] !== 1'bx ) && ( cipher12_prev[1] !== cipher12_expected_prev[1] )
		&& ((cipher12_expected_prev[1] !== last_cipher12_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher12[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher12_expected_prev);
		$display ("     Real value = %b", cipher12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_cipher12_exp[1] = cipher12_expected_prev[1];
	end
	if (
		( cipher12_expected_prev[2] !== 1'bx ) && ( cipher12_prev[2] !== cipher12_expected_prev[2] )
		&& ((cipher12_expected_prev[2] !== last_cipher12_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher12[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher12_expected_prev);
		$display ("     Real value = %b", cipher12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_cipher12_exp[2] = cipher12_expected_prev[2];
	end
	if (
		( cipher12_expected_prev[3] !== 1'bx ) && ( cipher12_prev[3] !== cipher12_expected_prev[3] )
		&& ((cipher12_expected_prev[3] !== last_cipher12_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher12[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher12_expected_prev);
		$display ("     Real value = %b", cipher12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_cipher12_exp[3] = cipher12_expected_prev[3];
	end
	if (
		( cipher12_expected_prev[4] !== 1'bx ) && ( cipher12_prev[4] !== cipher12_expected_prev[4] )
		&& ((cipher12_expected_prev[4] !== last_cipher12_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher12[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher12_expected_prev);
		$display ("     Real value = %b", cipher12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_cipher12_exp[4] = cipher12_expected_prev[4];
	end
	if (
		( cipher12_expected_prev[5] !== 1'bx ) && ( cipher12_prev[5] !== cipher12_expected_prev[5] )
		&& ((cipher12_expected_prev[5] !== last_cipher12_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher12[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher12_expected_prev);
		$display ("     Real value = %b", cipher12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_cipher12_exp[5] = cipher12_expected_prev[5];
	end
	if (
		( cipher12_expected_prev[6] !== 1'bx ) && ( cipher12_prev[6] !== cipher12_expected_prev[6] )
		&& ((cipher12_expected_prev[6] !== last_cipher12_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher12[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher12_expected_prev);
		$display ("     Real value = %b", cipher12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_cipher12_exp[6] = cipher12_expected_prev[6];
	end
	if (
		( cipher12_expected_prev[7] !== 1'bx ) && ( cipher12_prev[7] !== cipher12_expected_prev[7] )
		&& ((cipher12_expected_prev[7] !== last_cipher12_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher12[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher12_expected_prev);
		$display ("     Real value = %b", cipher12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_cipher12_exp[7] = cipher12_expected_prev[7];
	end
	if (
		( cipher13_expected_prev[0] !== 1'bx ) && ( cipher13_prev[0] !== cipher13_expected_prev[0] )
		&& ((cipher13_expected_prev[0] !== last_cipher13_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher13[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher13_expected_prev);
		$display ("     Real value = %b", cipher13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_cipher13_exp[0] = cipher13_expected_prev[0];
	end
	if (
		( cipher13_expected_prev[1] !== 1'bx ) && ( cipher13_prev[1] !== cipher13_expected_prev[1] )
		&& ((cipher13_expected_prev[1] !== last_cipher13_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher13[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher13_expected_prev);
		$display ("     Real value = %b", cipher13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_cipher13_exp[1] = cipher13_expected_prev[1];
	end
	if (
		( cipher13_expected_prev[2] !== 1'bx ) && ( cipher13_prev[2] !== cipher13_expected_prev[2] )
		&& ((cipher13_expected_prev[2] !== last_cipher13_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher13[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher13_expected_prev);
		$display ("     Real value = %b", cipher13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_cipher13_exp[2] = cipher13_expected_prev[2];
	end
	if (
		( cipher13_expected_prev[3] !== 1'bx ) && ( cipher13_prev[3] !== cipher13_expected_prev[3] )
		&& ((cipher13_expected_prev[3] !== last_cipher13_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher13[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher13_expected_prev);
		$display ("     Real value = %b", cipher13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_cipher13_exp[3] = cipher13_expected_prev[3];
	end
	if (
		( cipher13_expected_prev[4] !== 1'bx ) && ( cipher13_prev[4] !== cipher13_expected_prev[4] )
		&& ((cipher13_expected_prev[4] !== last_cipher13_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher13[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher13_expected_prev);
		$display ("     Real value = %b", cipher13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_cipher13_exp[4] = cipher13_expected_prev[4];
	end
	if (
		( cipher13_expected_prev[5] !== 1'bx ) && ( cipher13_prev[5] !== cipher13_expected_prev[5] )
		&& ((cipher13_expected_prev[5] !== last_cipher13_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher13[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher13_expected_prev);
		$display ("     Real value = %b", cipher13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_cipher13_exp[5] = cipher13_expected_prev[5];
	end
	if (
		( cipher13_expected_prev[6] !== 1'bx ) && ( cipher13_prev[6] !== cipher13_expected_prev[6] )
		&& ((cipher13_expected_prev[6] !== last_cipher13_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher13[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher13_expected_prev);
		$display ("     Real value = %b", cipher13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_cipher13_exp[6] = cipher13_expected_prev[6];
	end
	if (
		( cipher13_expected_prev[7] !== 1'bx ) && ( cipher13_prev[7] !== cipher13_expected_prev[7] )
		&& ((cipher13_expected_prev[7] !== last_cipher13_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher13[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher13_expected_prev);
		$display ("     Real value = %b", cipher13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_cipher13_exp[7] = cipher13_expected_prev[7];
	end
	if (
		( cipher14_expected_prev[0] !== 1'bx ) && ( cipher14_prev[0] !== cipher14_expected_prev[0] )
		&& ((cipher14_expected_prev[0] !== last_cipher14_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher14[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher14_expected_prev);
		$display ("     Real value = %b", cipher14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_cipher14_exp[0] = cipher14_expected_prev[0];
	end
	if (
		( cipher14_expected_prev[1] !== 1'bx ) && ( cipher14_prev[1] !== cipher14_expected_prev[1] )
		&& ((cipher14_expected_prev[1] !== last_cipher14_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher14[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher14_expected_prev);
		$display ("     Real value = %b", cipher14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_cipher14_exp[1] = cipher14_expected_prev[1];
	end
	if (
		( cipher14_expected_prev[2] !== 1'bx ) && ( cipher14_prev[2] !== cipher14_expected_prev[2] )
		&& ((cipher14_expected_prev[2] !== last_cipher14_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher14[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher14_expected_prev);
		$display ("     Real value = %b", cipher14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_cipher14_exp[2] = cipher14_expected_prev[2];
	end
	if (
		( cipher14_expected_prev[3] !== 1'bx ) && ( cipher14_prev[3] !== cipher14_expected_prev[3] )
		&& ((cipher14_expected_prev[3] !== last_cipher14_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher14[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher14_expected_prev);
		$display ("     Real value = %b", cipher14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_cipher14_exp[3] = cipher14_expected_prev[3];
	end
	if (
		( cipher14_expected_prev[4] !== 1'bx ) && ( cipher14_prev[4] !== cipher14_expected_prev[4] )
		&& ((cipher14_expected_prev[4] !== last_cipher14_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher14[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher14_expected_prev);
		$display ("     Real value = %b", cipher14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_cipher14_exp[4] = cipher14_expected_prev[4];
	end
	if (
		( cipher14_expected_prev[5] !== 1'bx ) && ( cipher14_prev[5] !== cipher14_expected_prev[5] )
		&& ((cipher14_expected_prev[5] !== last_cipher14_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher14[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher14_expected_prev);
		$display ("     Real value = %b", cipher14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_cipher14_exp[5] = cipher14_expected_prev[5];
	end
	if (
		( cipher14_expected_prev[6] !== 1'bx ) && ( cipher14_prev[6] !== cipher14_expected_prev[6] )
		&& ((cipher14_expected_prev[6] !== last_cipher14_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher14[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher14_expected_prev);
		$display ("     Real value = %b", cipher14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_cipher14_exp[6] = cipher14_expected_prev[6];
	end
	if (
		( cipher14_expected_prev[7] !== 1'bx ) && ( cipher14_prev[7] !== cipher14_expected_prev[7] )
		&& ((cipher14_expected_prev[7] !== last_cipher14_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher14[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher14_expected_prev);
		$display ("     Real value = %b", cipher14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_cipher14_exp[7] = cipher14_expected_prev[7];
	end
	if (
		( cipher15_expected_prev[0] !== 1'bx ) && ( cipher15_prev[0] !== cipher15_expected_prev[0] )
		&& ((cipher15_expected_prev[0] !== last_cipher15_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher15[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher15_expected_prev);
		$display ("     Real value = %b", cipher15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_cipher15_exp[0] = cipher15_expected_prev[0];
	end
	if (
		( cipher15_expected_prev[1] !== 1'bx ) && ( cipher15_prev[1] !== cipher15_expected_prev[1] )
		&& ((cipher15_expected_prev[1] !== last_cipher15_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher15[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher15_expected_prev);
		$display ("     Real value = %b", cipher15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_cipher15_exp[1] = cipher15_expected_prev[1];
	end
	if (
		( cipher15_expected_prev[2] !== 1'bx ) && ( cipher15_prev[2] !== cipher15_expected_prev[2] )
		&& ((cipher15_expected_prev[2] !== last_cipher15_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher15[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher15_expected_prev);
		$display ("     Real value = %b", cipher15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_cipher15_exp[2] = cipher15_expected_prev[2];
	end
	if (
		( cipher15_expected_prev[3] !== 1'bx ) && ( cipher15_prev[3] !== cipher15_expected_prev[3] )
		&& ((cipher15_expected_prev[3] !== last_cipher15_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher15[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher15_expected_prev);
		$display ("     Real value = %b", cipher15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_cipher15_exp[3] = cipher15_expected_prev[3];
	end
	if (
		( cipher15_expected_prev[4] !== 1'bx ) && ( cipher15_prev[4] !== cipher15_expected_prev[4] )
		&& ((cipher15_expected_prev[4] !== last_cipher15_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher15[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher15_expected_prev);
		$display ("     Real value = %b", cipher15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_cipher15_exp[4] = cipher15_expected_prev[4];
	end
	if (
		( cipher15_expected_prev[5] !== 1'bx ) && ( cipher15_prev[5] !== cipher15_expected_prev[5] )
		&& ((cipher15_expected_prev[5] !== last_cipher15_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher15[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher15_expected_prev);
		$display ("     Real value = %b", cipher15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_cipher15_exp[5] = cipher15_expected_prev[5];
	end
	if (
		( cipher15_expected_prev[6] !== 1'bx ) && ( cipher15_prev[6] !== cipher15_expected_prev[6] )
		&& ((cipher15_expected_prev[6] !== last_cipher15_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher15[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher15_expected_prev);
		$display ("     Real value = %b", cipher15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_cipher15_exp[6] = cipher15_expected_prev[6];
	end
	if (
		( cipher15_expected_prev[7] !== 1'bx ) && ( cipher15_prev[7] !== cipher15_expected_prev[7] )
		&& ((cipher15_expected_prev[7] !== last_cipher15_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher15[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher15_expected_prev);
		$display ("     Real value = %b", cipher15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_cipher15_exp[7] = cipher15_expected_prev[7];
	end
	if (
		( cipher16_expected_prev[0] !== 1'bx ) && ( cipher16_prev[0] !== cipher16_expected_prev[0] )
		&& ((cipher16_expected_prev[0] !== last_cipher16_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher16[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher16_expected_prev);
		$display ("     Real value = %b", cipher16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_cipher16_exp[0] = cipher16_expected_prev[0];
	end
	if (
		( cipher16_expected_prev[1] !== 1'bx ) && ( cipher16_prev[1] !== cipher16_expected_prev[1] )
		&& ((cipher16_expected_prev[1] !== last_cipher16_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher16[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher16_expected_prev);
		$display ("     Real value = %b", cipher16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_cipher16_exp[1] = cipher16_expected_prev[1];
	end
	if (
		( cipher16_expected_prev[2] !== 1'bx ) && ( cipher16_prev[2] !== cipher16_expected_prev[2] )
		&& ((cipher16_expected_prev[2] !== last_cipher16_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher16[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher16_expected_prev);
		$display ("     Real value = %b", cipher16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_cipher16_exp[2] = cipher16_expected_prev[2];
	end
	if (
		( cipher16_expected_prev[3] !== 1'bx ) && ( cipher16_prev[3] !== cipher16_expected_prev[3] )
		&& ((cipher16_expected_prev[3] !== last_cipher16_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher16[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher16_expected_prev);
		$display ("     Real value = %b", cipher16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_cipher16_exp[3] = cipher16_expected_prev[3];
	end
	if (
		( cipher16_expected_prev[4] !== 1'bx ) && ( cipher16_prev[4] !== cipher16_expected_prev[4] )
		&& ((cipher16_expected_prev[4] !== last_cipher16_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher16[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher16_expected_prev);
		$display ("     Real value = %b", cipher16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_cipher16_exp[4] = cipher16_expected_prev[4];
	end
	if (
		( cipher16_expected_prev[5] !== 1'bx ) && ( cipher16_prev[5] !== cipher16_expected_prev[5] )
		&& ((cipher16_expected_prev[5] !== last_cipher16_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher16[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher16_expected_prev);
		$display ("     Real value = %b", cipher16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_cipher16_exp[5] = cipher16_expected_prev[5];
	end
	if (
		( cipher16_expected_prev[6] !== 1'bx ) && ( cipher16_prev[6] !== cipher16_expected_prev[6] )
		&& ((cipher16_expected_prev[6] !== last_cipher16_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher16[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher16_expected_prev);
		$display ("     Real value = %b", cipher16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_cipher16_exp[6] = cipher16_expected_prev[6];
	end
	if (
		( cipher16_expected_prev[7] !== 1'bx ) && ( cipher16_prev[7] !== cipher16_expected_prev[7] )
		&& ((cipher16_expected_prev[7] !== last_cipher16_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher16[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher16_expected_prev);
		$display ("     Real value = %b", cipher16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_cipher16_exp[7] = cipher16_expected_prev[7];
	end
	if (
		( cipher17_expected_prev[0] !== 1'bx ) && ( cipher17_prev[0] !== cipher17_expected_prev[0] )
		&& ((cipher17_expected_prev[0] !== last_cipher17_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher17[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher17_expected_prev);
		$display ("     Real value = %b", cipher17_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_cipher17_exp[0] = cipher17_expected_prev[0];
	end
	if (
		( cipher17_expected_prev[1] !== 1'bx ) && ( cipher17_prev[1] !== cipher17_expected_prev[1] )
		&& ((cipher17_expected_prev[1] !== last_cipher17_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher17[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher17_expected_prev);
		$display ("     Real value = %b", cipher17_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_cipher17_exp[1] = cipher17_expected_prev[1];
	end
	if (
		( cipher17_expected_prev[2] !== 1'bx ) && ( cipher17_prev[2] !== cipher17_expected_prev[2] )
		&& ((cipher17_expected_prev[2] !== last_cipher17_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher17[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher17_expected_prev);
		$display ("     Real value = %b", cipher17_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_cipher17_exp[2] = cipher17_expected_prev[2];
	end
	if (
		( cipher17_expected_prev[3] !== 1'bx ) && ( cipher17_prev[3] !== cipher17_expected_prev[3] )
		&& ((cipher17_expected_prev[3] !== last_cipher17_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher17[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher17_expected_prev);
		$display ("     Real value = %b", cipher17_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_cipher17_exp[3] = cipher17_expected_prev[3];
	end
	if (
		( cipher17_expected_prev[4] !== 1'bx ) && ( cipher17_prev[4] !== cipher17_expected_prev[4] )
		&& ((cipher17_expected_prev[4] !== last_cipher17_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher17[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher17_expected_prev);
		$display ("     Real value = %b", cipher17_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_cipher17_exp[4] = cipher17_expected_prev[4];
	end
	if (
		( cipher17_expected_prev[5] !== 1'bx ) && ( cipher17_prev[5] !== cipher17_expected_prev[5] )
		&& ((cipher17_expected_prev[5] !== last_cipher17_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher17[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher17_expected_prev);
		$display ("     Real value = %b", cipher17_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_cipher17_exp[5] = cipher17_expected_prev[5];
	end
	if (
		( cipher17_expected_prev[6] !== 1'bx ) && ( cipher17_prev[6] !== cipher17_expected_prev[6] )
		&& ((cipher17_expected_prev[6] !== last_cipher17_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher17[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher17_expected_prev);
		$display ("     Real value = %b", cipher17_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_cipher17_exp[6] = cipher17_expected_prev[6];
	end
	if (
		( cipher17_expected_prev[7] !== 1'bx ) && ( cipher17_prev[7] !== cipher17_expected_prev[7] )
		&& ((cipher17_expected_prev[7] !== last_cipher17_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cipher17[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cipher17_expected_prev);
		$display ("     Real value = %b", cipher17_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_cipher17_exp[7] = cipher17_expected_prev[7];
	end
	if (
		( done_expected_prev !== 1'bx ) && ( done_prev !== done_expected_prev )
		&& ((done_expected_prev !== last_done_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done_expected_prev);
		$display ("     Real value = %b", done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_done_exp = done_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module trifid_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg crypt;
reg [7:0] data0;
reg [7:0] data1;
reg [7:0] data2;
reg [7:0] data3;
reg [7:0] data4;
reg [7:0] data5;
reg [7:0] data6;
reg [7:0] data7;
reg [7:0] data8;
reg [7:0] data9;
reg [7:0] data10;
reg [7:0] data11;
reg [7:0] data12;
reg [7:0] data13;
reg [7:0] data14;
reg [7:0] data15;
reg [7:0] data16;
reg [7:0] data17;
reg ready;
// wires                                               
wire [7:0] cipher0;
wire [7:0] cipher1;
wire [7:0] cipher2;
wire [7:0] cipher3;
wire [7:0] cipher4;
wire [7:0] cipher5;
wire [7:0] cipher6;
wire [7:0] cipher7;
wire [7:0] cipher8;
wire [7:0] cipher9;
wire [7:0] cipher10;
wire [7:0] cipher11;
wire [7:0] cipher12;
wire [7:0] cipher13;
wire [7:0] cipher14;
wire [7:0] cipher15;
wire [7:0] cipher16;
wire [7:0] cipher17;
wire done;

wire sampler;                             

// assign statements (if any)                          
trifid i1 (
// port map - connection between master ports and signals/registers   
	.cipher0(cipher0),
	.cipher1(cipher1),
	.cipher2(cipher2),
	.cipher3(cipher3),
	.cipher4(cipher4),
	.cipher5(cipher5),
	.cipher6(cipher6),
	.cipher7(cipher7),
	.cipher8(cipher8),
	.cipher9(cipher9),
	.cipher10(cipher10),
	.cipher11(cipher11),
	.cipher12(cipher12),
	.cipher13(cipher13),
	.cipher14(cipher14),
	.cipher15(cipher15),
	.cipher16(cipher16),
	.cipher17(cipher17),
	.clk(clk),
	.crypt(crypt),
	.data0(data0),
	.data1(data1),
	.data2(data2),
	.data3(data3),
	.data4(data4),
	.data5(data5),
	.data6(data6),
	.data7(data7),
	.data8(data8),
	.data9(data9),
	.data10(data10),
	.data11(data11),
	.data12(data12),
	.data13(data13),
	.data14(data14),
	.data15(data15),
	.data16(data16),
	.data17(data17),
	.done(done),
	.ready(ready)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// data0[ 7 ]
initial
begin
	data0[7] = 1'b0;
end 
// data0[ 6 ]
initial
begin
	data0[6] = 1'b1;
end 
// data0[ 5 ]
initial
begin
	data0[5] = 1'b0;
end 
// data0[ 4 ]
initial
begin
	data0[4] = 1'b1;
end 
// data0[ 3 ]
initial
begin
	data0[3] = 1'b0;
end 
// data0[ 2 ]
initial
begin
	data0[2] = 1'b1;
end 
// data0[ 1 ]
initial
begin
	data0[1] = 1'b0;
end 
// data0[ 0 ]
initial
begin
	data0[0] = 1'b0;
end 
// data1[ 7 ]
initial
begin
	data1[7] = 1'b0;
end 
// data1[ 6 ]
initial
begin
	data1[6] = 1'b1;
end 
// data1[ 5 ]
initial
begin
	data1[5] = 1'b0;
end 
// data1[ 4 ]
initial
begin
	data1[4] = 1'b1;
end 
// data1[ 3 ]
initial
begin
	data1[3] = 1'b0;
end 
// data1[ 2 ]
initial
begin
	data1[2] = 1'b0;
end 
// data1[ 1 ]
initial
begin
	data1[1] = 1'b1;
end 
// data1[ 0 ]
initial
begin
	data1[0] = 1'b0;
end 
// data2[ 7 ]
initial
begin
	data2[7] = 1'b0;
end 
// data2[ 6 ]
initial
begin
	data2[6] = 1'b1;
end 
// data2[ 5 ]
initial
begin
	data2[5] = 1'b0;
end 
// data2[ 4 ]
initial
begin
	data2[4] = 1'b0;
end 
// data2[ 3 ]
initial
begin
	data2[3] = 1'b0;
end 
// data2[ 2 ]
initial
begin
	data2[2] = 1'b1;
end 
// data2[ 1 ]
initial
begin
	data2[1] = 1'b0;
end 
// data2[ 0 ]
initial
begin
	data2[0] = 1'b1;
end 
// data3[ 7 ]
initial
begin
	data3[7] = 1'b0;
end 
// data3[ 6 ]
initial
begin
	data3[6] = 1'b1;
end 
// data3[ 5 ]
initial
begin
	data3[5] = 1'b0;
end 
// data3[ 4 ]
initial
begin
	data3[4] = 1'b0;
end 
// data3[ 3 ]
initial
begin
	data3[3] = 1'b0;
end 
// data3[ 2 ]
initial
begin
	data3[2] = 1'b0;
end 
// data3[ 1 ]
initial
begin
	data3[1] = 1'b0;
end 
// data3[ 0 ]
initial
begin
	data3[0] = 1'b1;
end 
// data4[ 7 ]
initial
begin
	data4[7] = 1'b0;
end 
// data4[ 6 ]
initial
begin
	data4[6] = 1'b1;
end 
// data4[ 5 ]
initial
begin
	data4[5] = 1'b0;
end 
// data4[ 4 ]
initial
begin
	data4[4] = 1'b1;
end 
// data4[ 3 ]
initial
begin
	data4[3] = 1'b0;
end 
// data4[ 2 ]
initial
begin
	data4[2] = 1'b1;
end 
// data4[ 1 ]
initial
begin
	data4[1] = 1'b0;
end 
// data4[ 0 ]
initial
begin
	data4[0] = 1'b0;
end 
// data5[ 7 ]
initial
begin
	data5[7] = 1'b0;
end 
// data5[ 6 ]
initial
begin
	data5[6] = 1'b1;
end 
// data5[ 5 ]
initial
begin
	data5[5] = 1'b0;
end 
// data5[ 4 ]
initial
begin
	data5[4] = 1'b1;
end 
// data5[ 3 ]
initial
begin
	data5[3] = 1'b1;
end 
// data5[ 2 ]
initial
begin
	data5[2] = 1'b0;
end 
// data5[ 1 ]
initial
begin
	data5[1] = 1'b0;
end 
// data5[ 0 ]
initial
begin
	data5[0] = 1'b1;
end 
// data6[ 7 ]
initial
begin
	data6[7] = 1'b0;
end 
// data6[ 6 ]
initial
begin
	data6[6] = 1'b1;
end 
// data6[ 5 ]
initial
begin
	data6[5] = 1'b0;
end 
// data6[ 4 ]
initial
begin
	data6[4] = 1'b0;
end 
// data6[ 3 ]
initial
begin
	data6[3] = 1'b0;
end 
// data6[ 2 ]
initial
begin
	data6[2] = 1'b1;
end 
// data6[ 1 ]
initial
begin
	data6[1] = 1'b0;
end 
// data6[ 0 ]
initial
begin
	data6[0] = 1'b1;
end 
// data7[ 7 ]
initial
begin
	data7[7] = 1'b0;
end 
// data7[ 6 ]
initial
begin
	data7[6] = 1'b1;
end 
// data7[ 5 ]
initial
begin
	data7[5] = 1'b0;
end 
// data7[ 4 ]
initial
begin
	data7[4] = 1'b0;
end 
// data7[ 3 ]
initial
begin
	data7[3] = 1'b1;
end 
// data7[ 2 ]
initial
begin
	data7[2] = 1'b1;
end 
// data7[ 1 ]
initial
begin
	data7[1] = 1'b1;
end 
// data7[ 0 ]
initial
begin
	data7[0] = 1'b0;
end 
// data8[ 7 ]
initial
begin
	data8[7] = 1'b0;
end 
// data8[ 6 ]
initial
begin
	data8[6] = 1'b1;
end 
// data8[ 5 ]
initial
begin
	data8[5] = 1'b0;
end 
// data8[ 4 ]
initial
begin
	data8[4] = 1'b0;
end 
// data8[ 3 ]
initial
begin
	data8[3] = 1'b0;
end 
// data8[ 2 ]
initial
begin
	data8[2] = 1'b1;
end 
// data8[ 1 ]
initial
begin
	data8[1] = 1'b0;
end 
// data8[ 0 ]
initial
begin
	data8[0] = 1'b0;
end 
// data9[ 7 ]
initial
begin
	data9[7] = 1'b0;
end 
// data9[ 6 ]
initial
begin
	data9[6] = 1'b1;
end 
// data9[ 5 ]
initial
begin
	data9[5] = 1'b0;
end 
// data9[ 4 ]
initial
begin
	data9[4] = 1'b1;
end 
// data9[ 3 ]
initial
begin
	data9[3] = 1'b0;
end 
// data9[ 2 ]
initial
begin
	data9[2] = 1'b0;
end 
// data9[ 1 ]
initial
begin
	data9[1] = 1'b1;
end 
// data9[ 0 ]
initial
begin
	data9[0] = 1'b1;
end 
// data10[ 7 ]
initial
begin
	data10[7] = 1'b0;
end 
// data10[ 6 ]
initial
begin
	data10[6] = 1'b1;
end 
// data10[ 5 ]
initial
begin
	data10[5] = 1'b0;
end 
// data10[ 4 ]
initial
begin
	data10[4] = 1'b0;
end 
// data10[ 3 ]
initial
begin
	data10[3] = 1'b0;
end 
// data10[ 2 ]
initial
begin
	data10[2] = 1'b0;
end 
// data10[ 1 ]
initial
begin
	data10[1] = 1'b1;
end 
// data10[ 0 ]
initial
begin
	data10[0] = 1'b0;
end 
// data11[ 7 ]
initial
begin
	data11[7] = 1'b0;
end 
// data11[ 6 ]
initial
begin
	data11[6] = 1'b1;
end 
// data11[ 5 ]
initial
begin
	data11[5] = 1'b0;
end 
// data11[ 4 ]
initial
begin
	data11[4] = 1'b0;
end 
// data11[ 3 ]
initial
begin
	data11[3] = 1'b1;
end 
// data11[ 2 ]
initial
begin
	data11[2] = 1'b1;
end 
// data11[ 1 ]
initial
begin
	data11[1] = 1'b1;
end 
// data11[ 0 ]
initial
begin
	data11[0] = 1'b1;
end 
// data12[ 7 ]
initial
begin
	data12[7] = 1'b0;
end 
// data12[ 6 ]
initial
begin
	data12[6] = 1'b1;
end 
// data12[ 5 ]
initial
begin
	data12[5] = 1'b0;
end 
// data12[ 4 ]
initial
begin
	data12[4] = 1'b0;
end 
// data12[ 3 ]
initial
begin
	data12[3] = 1'b0;
end 
// data12[ 2 ]
initial
begin
	data12[2] = 1'b1;
end 
// data12[ 1 ]
initial
begin
	data12[1] = 1'b0;
end 
// data12[ 0 ]
initial
begin
	data12[0] = 1'b1;
end 
// data13[ 7 ]
initial
begin
	data13[7] = 1'b0;
end 
// data13[ 6 ]
initial
begin
	data13[6] = 1'b1;
end 
// data13[ 5 ]
initial
begin
	data13[5] = 1'b0;
end 
// data13[ 4 ]
initial
begin
	data13[4] = 1'b1;
end 
// data13[ 3 ]
initial
begin
	data13[3] = 1'b0;
end 
// data13[ 2 ]
initial
begin
	data13[2] = 1'b0;
end 
// data13[ 1 ]
initial
begin
	data13[1] = 1'b1;
end 
// data13[ 0 ]
initial
begin
	data13[0] = 1'b0;
end 
// data14[ 7 ]
initial
begin
	data14[7] = 1'b0;
end 
// data14[ 6 ]
initial
begin
	data14[6] = 1'b1;
end 
// data14[ 5 ]
initial
begin
	data14[5] = 1'b0;
end 
// data14[ 4 ]
initial
begin
	data14[4] = 1'b1;
end 
// data14[ 3 ]
initial
begin
	data14[3] = 1'b0;
end 
// data14[ 2 ]
initial
begin
	data14[2] = 1'b1;
end 
// data14[ 1 ]
initial
begin
	data14[1] = 1'b1;
end 
// data14[ 0 ]
initial
begin
	data14[0] = 1'b1;
end 
// data15[ 7 ]
initial
begin
	data15[7] = 1'b0;
end 
// data15[ 6 ]
initial
begin
	data15[6] = 1'b1;
end 
// data15[ 5 ]
initial
begin
	data15[5] = 1'b0;
end 
// data15[ 4 ]
initial
begin
	data15[4] = 1'b0;
end 
// data15[ 3 ]
initial
begin
	data15[3] = 1'b0;
end 
// data15[ 2 ]
initial
begin
	data15[2] = 1'b0;
end 
// data15[ 1 ]
initial
begin
	data15[1] = 1'b0;
end 
// data15[ 0 ]
initial
begin
	data15[0] = 1'b1;
end 
// data16[ 7 ]
initial
begin
	data16[7] = 1'b0;
end 
// data16[ 6 ]
initial
begin
	data16[6] = 1'b1;
end 
// data16[ 5 ]
initial
begin
	data16[5] = 1'b0;
end 
// data16[ 4 ]
initial
begin
	data16[4] = 1'b1;
end 
// data16[ 3 ]
initial
begin
	data16[3] = 1'b0;
end 
// data16[ 2 ]
initial
begin
	data16[2] = 1'b0;
end 
// data16[ 1 ]
initial
begin
	data16[1] = 1'b1;
end 
// data16[ 0 ]
initial
begin
	data16[0] = 1'b0;
end 
// data17[ 7 ]
initial
begin
	data17[7] = 1'b0;
end 
// data17[ 6 ]
initial
begin
	data17[6] = 1'b0;
end 
// data17[ 5 ]
initial
begin
	data17[5] = 1'b0;
end 
// data17[ 4 ]
initial
begin
	data17[4] = 1'b0;
end 
// data17[ 3 ]
initial
begin
	data17[3] = 1'b0;
end 
// data17[ 2 ]
initial
begin
	data17[2] = 1'b0;
end 
// data17[ 1 ]
initial
begin
	data17[1] = 1'b0;
end 
// data17[ 0 ]
initial
begin
	data17[0] = 1'b0;
end 

// ready
initial
begin
	ready = 1'b1;
	ready = #10000 1'b0;
end 

// crypt
initial
begin
	crypt = 1'b0;
end 

trifid_vlg_sample_tst tb_sample (
	.clk(clk),
	.crypt(crypt),
	.data0(data0),
	.data1(data1),
	.data2(data2),
	.data3(data3),
	.data4(data4),
	.data5(data5),
	.data6(data6),
	.data7(data7),
	.data8(data8),
	.data9(data9),
	.data10(data10),
	.data11(data11),
	.data12(data12),
	.data13(data13),
	.data14(data14),
	.data15(data15),
	.data16(data16),
	.data17(data17),
	.ready(ready),
	.sampler_tx(sampler)
);

trifid_vlg_check_tst tb_out(
	.cipher0(cipher0),
	.cipher1(cipher1),
	.cipher2(cipher2),
	.cipher3(cipher3),
	.cipher4(cipher4),
	.cipher5(cipher5),
	.cipher6(cipher6),
	.cipher7(cipher7),
	.cipher8(cipher8),
	.cipher9(cipher9),
	.cipher10(cipher10),
	.cipher11(cipher11),
	.cipher12(cipher12),
	.cipher13(cipher13),
	.cipher14(cipher14),
	.cipher15(cipher15),
	.cipher16(cipher16),
	.cipher17(cipher17),
	.done(done),
	.sampler_rx(sampler)
);
endmodule

