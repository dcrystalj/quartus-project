--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" LPM_DECODES=11 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 13.0 cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_lpm_compare 2013:06:12:18:03:43:SJ cbx_lpm_decode 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_kpa
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[10..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[10..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode569w[1..0]	: WIRE;
	w_anode578w[3..0]	: WIRE;
	w_anode595w[3..0]	: WIRE;
	w_anode605w[3..0]	: WIRE;
	w_anode615w[3..0]	: WIRE;
	w_anode625w[3..0]	: WIRE;
	w_anode635w[3..0]	: WIRE;
	w_anode645w[3..0]	: WIRE;
	w_anode655w[3..0]	: WIRE;
	w_anode667w[1..0]	: WIRE;
	w_anode674w[3..0]	: WIRE;
	w_anode685w[3..0]	: WIRE;
	w_anode695w[3..0]	: WIRE;
	w_anode705w[3..0]	: WIRE;
	w_anode715w[3..0]	: WIRE;
	w_anode725w[3..0]	: WIRE;
	w_anode735w[3..0]	: WIRE;
	w_anode745w[3..0]	: WIRE;
	w_data567w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[10..0] = eq_wire[10..0];
	eq_wire[] = ( ( w_anode745w[3..3], w_anode735w[3..3], w_anode725w[3..3], w_anode715w[3..3], w_anode705w[3..3], w_anode695w[3..3], w_anode685w[3..3], w_anode674w[3..3]), ( w_anode655w[3..3], w_anode645w[3..3], w_anode635w[3..3], w_anode625w[3..3], w_anode615w[3..3], w_anode605w[3..3], w_anode595w[3..3], w_anode578w[3..3]));
	w_anode569w[] = ( (w_anode569w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode578w[] = ( (w_anode578w[2..2] & (! w_data567w[2..2])), (w_anode578w[1..1] & (! w_data567w[1..1])), (w_anode578w[0..0] & (! w_data567w[0..0])), w_anode569w[1..1]);
	w_anode595w[] = ( (w_anode595w[2..2] & (! w_data567w[2..2])), (w_anode595w[1..1] & (! w_data567w[1..1])), (w_anode595w[0..0] & w_data567w[0..0]), w_anode569w[1..1]);
	w_anode605w[] = ( (w_anode605w[2..2] & (! w_data567w[2..2])), (w_anode605w[1..1] & w_data567w[1..1]), (w_anode605w[0..0] & (! w_data567w[0..0])), w_anode569w[1..1]);
	w_anode615w[] = ( (w_anode615w[2..2] & (! w_data567w[2..2])), (w_anode615w[1..1] & w_data567w[1..1]), (w_anode615w[0..0] & w_data567w[0..0]), w_anode569w[1..1]);
	w_anode625w[] = ( (w_anode625w[2..2] & w_data567w[2..2]), (w_anode625w[1..1] & (! w_data567w[1..1])), (w_anode625w[0..0] & (! w_data567w[0..0])), w_anode569w[1..1]);
	w_anode635w[] = ( (w_anode635w[2..2] & w_data567w[2..2]), (w_anode635w[1..1] & (! w_data567w[1..1])), (w_anode635w[0..0] & w_data567w[0..0]), w_anode569w[1..1]);
	w_anode645w[] = ( (w_anode645w[2..2] & w_data567w[2..2]), (w_anode645w[1..1] & w_data567w[1..1]), (w_anode645w[0..0] & (! w_data567w[0..0])), w_anode569w[1..1]);
	w_anode655w[] = ( (w_anode655w[2..2] & w_data567w[2..2]), (w_anode655w[1..1] & w_data567w[1..1]), (w_anode655w[0..0] & w_data567w[0..0]), w_anode569w[1..1]);
	w_anode667w[] = ( (w_anode667w[0..0] & data_wire[3..3]), enable_wire);
	w_anode674w[] = ( (w_anode674w[2..2] & (! w_data567w[2..2])), (w_anode674w[1..1] & (! w_data567w[1..1])), (w_anode674w[0..0] & (! w_data567w[0..0])), w_anode667w[1..1]);
	w_anode685w[] = ( (w_anode685w[2..2] & (! w_data567w[2..2])), (w_anode685w[1..1] & (! w_data567w[1..1])), (w_anode685w[0..0] & w_data567w[0..0]), w_anode667w[1..1]);
	w_anode695w[] = ( (w_anode695w[2..2] & (! w_data567w[2..2])), (w_anode695w[1..1] & w_data567w[1..1]), (w_anode695w[0..0] & (! w_data567w[0..0])), w_anode667w[1..1]);
	w_anode705w[] = ( (w_anode705w[2..2] & (! w_data567w[2..2])), (w_anode705w[1..1] & w_data567w[1..1]), (w_anode705w[0..0] & w_data567w[0..0]), w_anode667w[1..1]);
	w_anode715w[] = ( (w_anode715w[2..2] & w_data567w[2..2]), (w_anode715w[1..1] & (! w_data567w[1..1])), (w_anode715w[0..0] & (! w_data567w[0..0])), w_anode667w[1..1]);
	w_anode725w[] = ( (w_anode725w[2..2] & w_data567w[2..2]), (w_anode725w[1..1] & (! w_data567w[1..1])), (w_anode725w[0..0] & w_data567w[0..0]), w_anode667w[1..1]);
	w_anode735w[] = ( (w_anode735w[2..2] & w_data567w[2..2]), (w_anode735w[1..1] & w_data567w[1..1]), (w_anode735w[0..0] & (! w_data567w[0..0])), w_anode667w[1..1]);
	w_anode745w[] = ( (w_anode745w[2..2] & w_data567w[2..2]), (w_anode745w[1..1] & w_data567w[1..1]), (w_anode745w[0..0] & w_data567w[0..0]), w_anode667w[1..1]);
	w_data567w[2..0] = data_wire[2..0];
END;
--VALID FILE
